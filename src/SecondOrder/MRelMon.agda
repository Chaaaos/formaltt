open import Agda.Primitive using (lzero; lsuc; _‚äî_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong; subst)

import SecondOrder.Arity
import SecondOrder.Signature
import SecondOrder.Metavariable
import SecondOrder.VRenaming
import SecondOrder.MRenaming
import SecondOrder.Term
import SecondOrder.Substitution
import SecondOrder.RMonadsMorphism
import SecondOrder.Instantiation

module SecondOrder.MRelMon
  {‚Ñì}
  {ùî∏ : SecondOrder.Arity.Arity}
  (Œ£ : SecondOrder.Signature.Signature ‚Ñì ùî∏)
  where

  open SecondOrder.Signature.Signature Œ£
  open SecondOrder.Metavariable Œ£
  open SecondOrder.Term Œ£
  open SecondOrder.VRenaming Œ£
  open SecondOrder.MRenaming Œ£
  open SecondOrder.Substitution Œ£
  open import SecondOrder.RMonadsMorphism
  open SecondOrder.Instantiation
