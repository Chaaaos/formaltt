open import Level
open import Relation.Binary.PropositionalEquality
open import Relation.Binary using (Setoid)
import Function.Equality
import Relation.Binary.Reasoning.Setoid as SetoidR

import Categories.Category
import Categories.Functor
import Categories.NaturalTransformation
import Categories.Category.Instance.Setoids

import Categories.Category.Cocartesian

import SecondOrder.Arity
import SecondOrder.Signature
import SecondOrder.Metavariable
import SecondOrder.Term
import SecondOrder.VRenaming

module SecondOrder.MRenaming
  {โ}
  {๐ธ : SecondOrder.Arity.Arity}
  (ฮฃ : SecondOrder.Signature.Signature โ ๐ธ)
  where

  open SecondOrder.Signature.Signature ฮฃ
  open SecondOrder.Metavariable ฮฃ
  open SecondOrder.Term ฮฃ
  open SecondOrder.VRenaming ฮฃ

  -- a metarenaming maps metavariables between contexts in an arity-preserving way
  _โแต_ : โ (ฮ ฯ : MContext) โ Set โ
  ฮ โแต ฯ = โ {ฮ A} โ [ ฮ , A ]โ ฮ โ [ ฮ , A ]โ ฯ

  infix 4 _โแต_

  -- equality of metarenamings

  _โกแต_ : โ {ฮ ฯ} (ฮน ฮผ : ฮ โแต ฯ) โ Set โ
  _โกแต_ {ฮ} ฮน ฮผ = โ {ฮ A} (M : [ ฮ , A ]โ ฮ) โ ฮน M โก ฮผ M

  infixl 3 _โกแต_

  โกแต-refl : โ {ฮ ฯ} {ฮน : ฮ โแต ฯ} โ ฮน โกแต ฮน
  โกแต-refl = ฮป M โ refl

  โกแต-sym : โ {ฮ ฯ} {ฮน ฮผ : ฮ โแต ฯ}
          โ ฮน โกแต ฮผ
          โ ฮผ โกแต ฮน
  โกแต-sym eq M = sym (eq M)

  โกแต-trans : โ {ฮ ฯ} {ฮน ฮผ ฮด : ฮ โแต ฯ}
           โ ฮน โกแต ฮผ
           โ ฮผ โกแต ฮด
           โ ฮน โกแต ฮด
  โกแต-trans eq1 eq2 M = trans (eq1 M) (eq2 M)

  -- meta-variable renamings form a setoid

  Mrenaming-setoid : โ (ฮ ฯ : MContext) โ Setoid โ โ
  Mrenaming-setoid ฮ ฯ =
    record
      { Carrier = ฮ โแต ฯ
      ;  _โ_ = ฮป ฮน ฮผ โ ฮน โกแต ฮผ
      ; isEquivalence =
                      record
                        { refl = ฮป {ฮน} M โ โกแต-refl {ฮ} {ฯ} {ฮน} M
                        ; sym = โกแต-sym
                        ; trans = โกแต-trans
                        }
      }

  -- the identity renaming

  idแต : โ {ฮ : MContext} โ ฮ โแต ฮ
  idแต M = M

  -- equal metavariable renaming act the same on metavariables


  -- composition of renamings
  _โแต_ : โ {ฮ ฯ ฮฉ} โ ฯ โแต ฮฉ โ ฮ โแต ฯ โ ฮ โแต ฮฉ
  (ฮน โแต ฮผ) M = ฮน (ฮผ M)

  infix 7 _โแต_

  -- composition respects equality
  โแต-resp-โกแต : โ {ฮ ฮ ฮ} {ฯโ ฯโ : ฮ โแต ฮ} {ฯโ ฯโ : ฮ โแต ฮ} โ
                 ฯโ โกแต ฯโ โ ฯโ โกแต ฯโ โ ฯโ โแต ฯโ โกแต ฯโ โแต ฯโ
  โแต-resp-โกแต {ฯโ = ฯโ} {ฯโ = ฯโ} ฮถ ฮพ x = trans (cong ฯโ (ฮพ x)) (ฮถ (ฯโ x))

  -- the identity is the unit

  identity-leftแต : โ {ฮ ฮ} {ฯ : ฮ โแต ฮ} โ idแต โแต ฯ โกแต ฯ
  identity-leftแต ฯ = refl

  identity-rightแต : โ {ฮ ฮ} {ฯ : ฮ โแต ฮ} โ ฯ โแต idแต โกแต ฯ
  identity-rightแต ฯ = refl

  -- composition is associative

  assocแต : โ {ฮ ฮ ฮ ฮจ} {ฯ : ฮ โแต ฮ} {ฯ : ฮ โแต ฮ} {ฯ : ฮ โแต ฮจ} โ
             (ฯ โแต ฯ) โแต ฯ โกแต ฯ โแต (ฯ โแต ฯ)
  assocแต x = refl

  sym-assocแต : โ {ฮ ฮ ฮ ฮจ} {ฯ : ฮ โแต ฮ} {ฯ : ฮ โแต ฮ} {ฯ : ฮ โแต ฮจ} โ
             ฯ โแต (ฯ โแต ฯ) โกแต (ฯ โแต ฯ) โแต ฯ
  sym-assocแต x = refl

  -- contexts and renamings form a category
  module _ where
    open Categories.Category

    MContexts : Category โ โ โ
    MContexts =
      record
        { Obj = MContext
        ; _โ_ = _โแต_
        ; _โ_ = _โกแต_
        ; id = idแต
        ; _โ_ = _โแต_
        ; assoc = ฮป {_} {_} {_} {_} {f} {g} {h} {_} โ assocแต {ฯ = f} {ฯ = g} {ฯ = h}
        ; sym-assoc = ฮป {_} {_} {_} {_} {f} {g} {h} {_} โ sym-assocแต {ฯ = f} {ฯ = g} {ฯ = h}
        ; identityหก = ฮป x โ refl
        ; identityสณ = ฮป x โ refl
        ; identityยฒ = ฮป x โ refl
        ; equiv = record { refl = ฮป {ฮน} {_} โ โกแต-refl {ฮน = ฮน} ; sym = โกแต-sym ; trans = โกแต-trans }
        ; โ-resp-โ = โแต-resp-โกแต
        }


  -- the coproduct structure of the category
  module _ where

    infixl 7 [_,_]แต

    [_,_]แต : โ {ฮ ฮ ฮ} โ ฮ โแต ฮ โ ฮ โแต ฮ โ ฮ ,, ฮ โแต ฮ
    [ ฯ , ฯ ]แต (var-inl x) = ฯ x
    [ ฯ , ฯ ]แต (var-inr y) = ฯ y

    inlแต : โ {ฮ ฮ} โ ฮ โแต ฮ ,, ฮ
    inlแต = var-inl

    inrแต : โ {ฮ ฮ} โ ฮ โแต ฮ ,, ฮ
    inrแต = var-inr

    uniqueแต : โ {ฮ ฮ ฮ} {ฯ : ฮ ,, ฮ โแต ฮ} {ฯ : ฮ โแต ฮ} {ฯ : ฮ โแต ฮ}
              โ ฯ โแต inlแต โกแต ฯ
              โ ฯ โแต inrแต โกแต ฯ
              โ [ ฯ , ฯ ]แต โกแต ฯ
    uniqueแต ฮพ ฮถ (var-inl x) = sym (ฮพ x)
    uniqueแต ฮพ ฮถ (var-inr y) = sym (ฮถ y)

    MContext-+ : Categories.Category.Cocartesian.BinaryCoproducts MContexts
    MContext-+ =
      record {
        coproduct =
          ฮป {ฮ ฮ} โ
          record
            { A+B = ฮ ,, ฮ
            ; iโ = inlแต
            ; iโ = inrแต
            ; [_,_] = [_,_]แต
            ; injectโ = ฮป x โ refl
            ; injectโ = ฮป x โ refl
            ; unique = uniqueแต
            }
      }

  open Categories.Category.Cocartesian.BinaryCoproducts MContext-+

  -- the renaming from the empty context

  inแต : โ {ฮ} โ ctx-empty โแต ฮ
  inแต ()

  -- extension of a renaming is summing with identity
  โแต : โ {ฮ ฮจ ฮฉ} โ ฮ โแต ฮจ โ ฮ ,, ฮฉ โแต ฮจ ,, ฮฉ
  โแต ฯ = ฯ +โ idแต

  -- a renaming can also be extended on the right
  แตโแต : โ {ฮ ฮจ} โ ฮ โแต ฮจ โ โ {ฮฉ} โ ฮฉ ,, ฮ โแต ฮฉ ,, ฮจ
  แตโแต ฯ = idแต +โ ฯ


  -- the action of a metavariable renaming on terms
  infix 6 [_]แต_

  [_]แต_ : โ {ฮ ฮจ ฮ A} โ ฮ โแต ฮจ โ Term ฮ ฮ A โ Term ฮจ ฮ A
  [ ฮน ]แต (tm-var x) = tm-var x
  [ ฮน ]แต (tm-meta M ts) = tm-meta (ฮน M) (ฮป i โ [ ฮน ]แต ts i)
  [ ฮน ]แต (tm-oper f es) = tm-oper f (ฮป i โ [ ฮน ]แต es i)

  -- The sum of identities is an identity
  idแต+idแต : โ {ฮ ฮจ} โ idแต {ฮ = ฮ} +โ idแต {ฮ = ฮจ} โกแต idแต {ฮ = ฮ ,, ฮจ}
  idแต+idแต (var-inl x) = refl
  idแต+idแต (var-inr y) = refl

  -- The action of a renaming respects equality of terms
  []แต-resp-โ : โ {ฮ ฮจ ฮ A} {s t : Term ฮ ฮ A} {ฮน : ฮ โแต ฮจ} โ s โ t โ [ ฮน ]แต s โ [ ฮน ]แต t
  []แต-resp-โ (โ-โก refl) = โ-โก refl
  []แต-resp-โ (โ-meta ฮพ) = โ-meta (ฮป i โ []แต-resp-โ (ฮพ i))
  []แต-resp-โ (โ-oper ฮพ) = โ-oper (ฮป i โ []แต-resp-โ (ฮพ i))

  -- The action of a renaming respects equality of renamings
  []แต-resp-โกแต : โ {ฮ ฮจ ฮ A} {ฮน ฮผ : ฮ โแต ฮจ} {t : Term ฮ ฮ A} โ ฮน โกแต ฮผ โ [ ฮน ]แต t โ [ ฮผ ]แต t
  []แต-resp-โกแต {t = tm-var x} ฮพ = โ-โก refl
  []แต-resp-โกแต {ฮ} {ฮจ} {ฮ} {A} {ฮน = ฮน} {ฮผ = ฮผ} {t = tm-meta M ts} ฮพ =
    let open SetoidR (Term-setoid ฮจ ฮ A) in
    begin
    tm-meta (ฮน M) (ฮป i โ [ ฮน ]แต ts i) โโจ โ-meta (ฮป i โ []แต-resp-โกแต ฮพ) โฉ
    tm-meta (ฮน M) (ฮป i โ [ ฮผ ]แต ts i) โโจ โ-โก ((cong ฮป N โ tm-meta N (ฮป i โ [ ฮผ ]แต ts i)) (ฮพ M)) โฉ
    tm-meta (ฮผ M) (ฮป i โ [ ฮผ ]แต ts i) โโจ โ-โก refl โฉ
    tm-meta (ฮผ M) (ฮป i โ [ ฮผ ]แต ts i)
    โ
  []แต-resp-โกแต {t = tm-oper f es} ฮพ = โ-oper ฮป i โ []แต-resp-โกแต ฮพ

  -- The action of the identity is trival
  [idแต] : โ {ฮ ฮ A} {t : Term ฮ ฮ A} โ [ idแต ]แต t โ t
  [idแต] {t = tm-var x} = โ-refl
  [idแต] {t = tm-meta M ts} = โ-meta ฮป i โ [idแต]
  [idแต] {t = tm-oper f es} = โ-oper ฮป i โ [idแต]

  -- Extension respects composition
  โแต-resp-โแต : โ {ฮ ฮ ฮ ฮจ} {ฯ : ฮ โแต ฮ} {ฯ : ฮ โแต ฮ} โ โแต {ฮฉ = ฮจ} (ฯ โแต ฯ) โกแต (โแต ฯ) โแต (โแต ฯ)
  โแต-resp-โแต (var-inl x) = refl
  โแต-resp-โแต (var-inr y) = refl

  แตโแต-resp-โแต : โ {ฮ ฮจ ฮฉ ฮ} {ฯ : ฮ โแต ฮจ} {ฯ : ฮจ โแต ฮฉ}
    โ แตโแต {ฮ} {ฮฉ} (ฯ โแต ฯ) {ฮ} โกแต (แตโแต ฯ) โแต (แตโแต ฯ)
  แตโแต-resp-โแต (var-inl M) = refl
  แตโแต-resp-โแต (var-inr N) = refl

  -- Extension of the identity renaming is the identity
  โแต-resp-idแต : โ {ฮ ฮจ} โ (โแต {ฮ} {ฮ} {ฮจ}) (idแต {ฮ}) โกแต idแต
  โแต-resp-idแต (var-inl M) = refl
  โแต-resp-idแต (var-inr N) = refl

  แตโแต-resp-idแต : โ {ฮ ฮจ} โ (แตโแต {ฮ} {ฮ}) (idแต {ฮ}) {ฮจ} โกแต idแต
  แตโแต-resp-idแต (var-inl M) = refl
  แตโแต-resp-idแต (var-inr N) = refl

  -- Extension preserves equality of metavariable renamings
  แตโแต-resp-โกแต : โ {ฮ ฮจ ฮฉ} {ฮน ฮผ : ฮ โแต ฮจ} โ ฮน โกแต ฮผ โ แตโแต ฮน {ฮฉ} โกแต แตโแต ฮผ
  แตโแต-resp-โกแต ฮนโกฮผ (var-inl M) = refl
  แตโแต-resp-โกแต {ฮน = ฮน} ฮนโกฮผ (var-inr N) = cong (inrแต) (ฮนโกฮผ N)

  โแต-resp-โกแต : โ {ฮ ฮจ ฮฉ} {ฮน ฮผ : ฮ โแต ฮจ} โ ฮน โกแต ฮผ โ โแต {ฮฉ = ฮฉ} ฮน โกแต โแต ฮผ
  โแต-resp-โกแต ฮนโกฮผ (var-inl M) = cong var-inl (ฮนโกฮผ M)
  โแต-resp-โกแต {ฮน = ฮน} ฮนโกฮผ (var-inr N) = refl


  -- The action of a renaming is functorial
  [โแต] : โ {ฮ ฮจ ฮฉ ฮ} {ฮน : ฮ โแต ฮจ} {ฮผ : ฮจ โแต ฮฉ} {A} {t : Term ฮ ฮ A}
    โ [ ฮผ โแต ฮน ]แต t โ [ ฮผ ]แต ([ ฮน ]แต t)
  [โแต] {t = tm-var x} = โ-refl
  [โแต] {t = tm-meta M ts} = โ-meta (ฮป i โ [โแต])
  [โแต] {t = tm-oper f es} = โ-oper (ฮป i โ [โแต])

  แตโแตโแตโแต : โ {ฮ ฮจ ฮ ฮ A} {ฯ : ฮ โแต ฮ} {ฮน : ฮ โแต ฮจ} {t : Term ฮ ฮ A}
    โ [ ฮน ]แต ([ ฯ ]แต t) โ [ ฯ ]แต ([ ฮน ]แต t)
  แตโแตโแตโแต {t = tm-var x} = โ-refl
  แตโแตโแตโแต {t = tm-meta M ts} = โ-meta (ฮป i โ แตโแตโแตโแต {t = ts i})
  แตโแตโแตโแต {t = tm-oper f es} = โ-oper (ฮป i โ แตโแตโแตโแต {t = es i})

  split-sum : โ {ฮ ฮจ ฮ ฮฉ} {ฮน : ฮ โแต ฮจ} {ฮผ : ฮ โแต ฮฉ}
    โ (ฮผ +โ ฮน) โกแต (โแต ฮผ) โแต (แตโแต ฮน)
  split-sum (var-inl M) = refl
  split-sum (var-inr N) = refl

  split-sum2 : โ {ฮ ฮจ ฮ ฮฉ} {ฮน : ฮ โแต ฮจ} {ฮผ : ฮ โแต ฮฉ}
    โ (ฮผ +โ ฮน) โกแต (แตโแต ฮน) โแต (โแต ฮผ)
  split-sum2 (var-inl M) = refl
  split-sum2 (var-inr N) = refl

  โ-resp-+ : โ {ฮ ฮจ ฮ ฮฉ ฮ A} {ฮน : ฮ โแต ฮจ} {ฮผ : ฮ โแต ฮฉ} {t : Term (ฮ + ฮ) ฮ A}
    โ [ (โแต ฮผ) ]แต ([ (แตโแต ฮน) ]แต t) โ [ (แตโแต ฮน) ]แต ([ (โแต ฮผ) ]แต t)
  โ-resp-+ {ฮ} {ฮจ} {ฮ} {ฮฉ} {ฮ} {A} {ฮน} {ฮผ} {t = t} =
    let open SetoidR (Term-setoid (ฮฉ ,, ฮจ) ฮ A) in
    begin
    [ โแต ฮผ ]แต ([ แตโแต ฮน ]แต t) โโจ โ-sym [โแต] โฉ
    [ (โแต ฮผ) โแต (แตโแต ฮน) ]แต t  โโจ โ-sym ([]แต-resp-โกแต split-sum) โฉ
    [ (ฮผ +โ ฮน) ]แต t โโจ []แต-resp-โกแต split-sum2 โฉ
    [(แตโแต ฮน) โแต (โแต ฮผ)  ]แต t โโจ [โแต] โฉ
    [ แตโแต ฮน ]แต ([ โแต ฮผ ]แต t)
    โ

  โแต-resp-โ : โ {ฮ ฮจ ฮ ฮฉ} {ฮน : ฮ โแต ฮจ} {ฮผ : ฮจ โแต ฮฉ}
    โ โแต {ฮฉ = ฮ}  (ฮผ โแต ฮน) โกแต โแต ฮผ โแต โแต ฮน
  โแต-resp-โ (var-inl M) = refl
  โแต-resp-โ (var-inr N) = refl

  โแต-resp-โ-term : โ {ฮ ฮจ ฮ ฮฉ ฮ A} {ฮน : ฮ โแต ฮจ} {ฮผ : ฮจ โแต ฮฉ} {t : Term (ฮ ,, ฮ) ฮ A}
    โ [ โแต {ฮฉ = ฮ} (ฮผ โแต ฮน) ]แต t โ  [ โแต ฮผ ]แต ([ โแต ฮน ]แต t)
  โแต-resp-โ-term {ฮ} {ฮจ} {ฮ} {ฮฉ} {ฮ} {A} {ฮน} {ฮผ} {t = t} =
      let open SetoidR (Term-setoid (ฮฉ ,, ฮ) ฮ A) in
      begin
      [ โแต {ฮฉ = ฮ} (ฮผ โแต ฮน) ]แต t โโจ []แต-resp-โกแต โแต-resp-โ โฉ
      [ โแต ฮผ โแต โแต ฮน ]แต t โโจ [โแต] โฉ
      [ โแต ฮผ ]แต ([ โแต ฮน ]แต t)
      โ

  โแต-resp-แตโ : โ {ฮ ฮจ ฮ ฮฉ} {ฮน : ฮ โแต ฮจ} {ฮผ : ฮจ โแต ฮฉ}
    โ แตโแต (ฮผ โแต ฮน) {ฮฉ = ฮ} โกแต แตโแต ฮผ โแต แตโแต ฮน
  โแต-resp-แตโ (var-inl M) = refl
  โแต-resp-แตโ (var-inr N) = refl

  โแต-resp-แตโ-term : โ {ฮ ฮจ ฮ ฮฉ ฮ A} {ฮน : ฮ โแต ฮจ} {ฮผ : ฮจ โแต ฮฉ} {t : Term (ฮ ,, ฮ) ฮ A}
    โ [ แตโแต  (ฮผ โแต ฮน) {ฮฉ = ฮ} ]แต t โ  [ แตโแต ฮผ ]แต ([ แตโแต ฮน ]แต t)
  โแต-resp-แตโ-term {ฮ} {ฮจ} {ฮ} {ฮฉ} {ฮ} {A} {ฮน} {ฮผ} {t = t} =
      let open SetoidR (Term-setoid (ฮ ,, ฮฉ) ฮ A) in
      begin
      [ แตโแต (ฮผ โแต ฮน) {ฮฉ = ฮ} ]แต t โโจ []แต-resp-โกแต โแต-resp-แตโ โฉ
      [ แตโแต ฮผ โแต แตโแต ฮน ]แต t โโจ [โแต] โฉ
      [ แตโแต ฮผ ]แต ([ แตโแต ฮน ]แต t)
      โ


  vr-comm-mr : โ {ฮ ฮจ ฮ ฮ A} {ฯ : ฮ โแต ฮ} {ฮน : ฮ โแต ฮจ} {t : Term ฮ ฮ A}
    โ [ ฮน ]แต ([ ฯ ]แต t) โ [ ฯ ]แต ([ ฮน ]แต t)
  vr-comm-mr {t = tm-var x} = โ-refl
  vr-comm-mr {t = tm-meta M ts} = โ-meta (ฮป i โ vr-comm-mr)
  vr-comm-mr {t = tm-oper f es} = โ-oper (ฮป i โ vr-comm-mr)

  mr-comm-vr : โ {ฮ ฮจ ฮ ฮ A} {ฯ : ฮ โแต ฮ} {ฮน : ฮ โแต ฮจ} {t : Term ฮ ฮ A}
    โ [ ฯ ]แต ([ ฮน ]แต t) โ  [ ฮน ]แต ([ ฯ ]แต t)
  mr-comm-vr {t = tm-var x} = โ-refl
  mr-comm-vr {t = tm-meta M ts} = โ-meta (ฮป i โ mr-comm-vr)
  mr-comm-vr {t = tm-oper f es} = โ-oper (ฮป i โ mr-comm-vr)

  module _ {ฮ ฮจ : MContext} {A : sort} where
    open Categories.Category
    open Categories.Category.Instance.Setoids
    open Categories.Functor
    open Categories.NaturalTransformation

    MRenaming-NT : โ (ฮน : ฮ โแต ฮจ) โ NaturalTransformation (Term-Functor {ฮ} {A}) (Term-Functor {ฮจ} {A})
    MRenaming-NT ฮน =
      record
      { ฮท = ฮป ฮ โ record { _โจ$โฉ_ = [ ฮน ]แต_ ; cong = []แต-resp-โ }
      ; commute = ฮป ฯ tโs โ โ-trans ([]แต-resp-โ ([]แต-resp-โ tโs)) (แตโแตโแตโแต)
      ; sym-commute = ฮป ฯ tโs โ โ-trans (โ-sym แตโแตโแตโแต) ([]แต-resp-โ ([]แต-resp-โ tโs))
      }
