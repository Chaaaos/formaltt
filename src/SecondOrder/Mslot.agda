{-# OPTIONS --allow-unsolved-metas #-}

open import Agda.Primitive using (lzero; lsuc; _‚äî_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; subst; setoid)
open import Data.Product using (_√ó_; Œ£; _,_; proj‚ÇÅ; proj‚ÇÇ; zip; map; <_,_>; swap)
import Function.Equality
-- open import Relation.Binary using (Setoid)
-- import Relation.Binary.Reasoning.Setoid as SetoidR

import Categories.Category
import Categories.Functor
import Categories.Category.Instance.Setoids
import Categories.Monad.Relative
import Categories.Category.Equivalence
import Categories.Category.Cocartesian
import Categories.Category.Construction.Functors
import Categories.Category.Product
import Categories.NaturalTransformation
import Categories.NaturalTransformation.NaturalIsomorphism

import SecondOrder.Arity
import SecondOrder.Signature
import SecondOrder.Metavariable
import SecondOrder.VRenaming
import SecondOrder.MRenaming
import SecondOrder.Term
import SecondOrder.Substitution
import SecondOrder.RelativeMonadMorphism
import SecondOrder.Instantiation
import SecondOrder.IndexedCategory
import SecondOrder.RelativeKleisli


module SecondOrder.Mslot
  {‚Ñì}
  {ùî∏ : SecondOrder.Arity.Arity}
  (Œ£ : SecondOrder.Signature.Signature ‚Ñì ùî∏)
  where

  open SecondOrder.Signature.Signature Œ£
  open SecondOrder.Metavariable Œ£
  open SecondOrder.Term Œ£
  open SecondOrder.VRenaming Œ£
  open SecondOrder.MRenaming Œ£
  -- open SecondOrder.Substitution Œ£
  -- open import SecondOrder.RelativeMonadMorphism
  -- open SecondOrder.Instantiation
  open Categories.Category
  open Categories.Functor using (Functor)
  open Categories.NaturalTransformation renaming (id to idNt)
  open Categories.NaturalTransformation.NaturalIsomorphism renaming (refl to reflNt; sym to symNt; trans to transNt)
  open Categories.Category.Construction.Functors
  open Categories.Category.Instance.Setoids
  open Categories.Category.Product
  open Function.Equality using () renaming (setoid to Œ†-setoid)
  open SecondOrder.IndexedCategory
  -- open import SecondOrder.RelativeKleisli

  MTele = MContexts
  VTele = VContexts

  -- the codomain category of the MSlots functor. It should be equivalent to the
  -- functor category [ MTele x VTele , < Setoid >‚Çõ‚Çí·µ£‚Çú ]
  -- objects are functors, which are really pairs of functions, one on objects
  -- one on morphisms
  -- morphisms in this category are natural transformations

  module _ where
    open Category
    open NaturalTransformation
    open Function.Equality renaming (_‚àò_ to _‚àô_)

  Mslots : Functor MContexts (IndexedCategory VContext (IndexedCategory sort (Setoids ‚Ñì ‚Ñì)))
  Mslots =  
    let open Categories.NaturalTransformation in
    let open NaturalTransformation in
    let open Relation.Binary.PropositionalEquality.‚â°-Reasoning in
      record
        { F‚ÇÄ = Œª Œò Œì A ‚Üí setoid ([ Œì , A ]‚àà Œò)
        ; F‚ÇÅ = Œª Œπ Œì A ‚Üí record { _‚ü®$‚ü©_ = Œª M ‚Üí Œπ M ; cong = Œª M‚â°N ‚Üí cong Œπ M‚â°N }
        ; identity = Œª {Œò} Œì A {M} {N} M‚â°N ‚Üí cong id·µê M‚â°N
        ; homomorphism = Œª {Œò} {Œ®} {Œû} {Œπ} {Œº} Œì A M‚â°N ‚Üí cong (Œº ‚àò·µê Œπ) M‚â°N
        ; F-resp-‚âà = Œª {Œò} {Œ®} {Œπ} {Œº} Œπ‚â°·µêŒº Œì A {M} {N} M‚â°N ‚Üí
                   begin
                   Œπ M ‚â°‚ü® cong Œπ M‚â°N ‚ü©
                   Œπ N ‚â°‚ü® Œπ‚â°·µêŒº N ‚ü©
                   Œº N
                   ‚àé
        }
