open import Agda.Primitive using (lzero; lsuc; _‚äî_)

import SecondOrder.Arity
import SecondOrder.Context
import SecondOrder.Signature
import SecondOrder.Metavariable
import SecondOrder.Term

module SecondOrder.Theory
  {‚Ñìs ‚Ñìo}
  {ùî∏ : SecondOrder.Arity.Arity}
  (Œ£ : SecondOrder.Signature.Signature ‚Ñìs ‚Ñìo ùî∏)
  where

  open SecondOrder.Metavariable Œ£ public
  open SecondOrder.Term Œ£ public
  open SecondOrder.Signature.Signature Œ£ public

  record Axiom : Set (lsuc (‚Ñìs ‚äî ‚Ñìo)) where
    constructor make-ax
    field
      ax-mv-ctx : MetaContext -- metavariable context of an equation
      ax-sort : sort -- sort of an equation
      ax-lhs : Term ax-mv-ctx ctx-empty ax-sort -- left-hand side
      ax-rhs : Term ax-mv-ctx ctx-empty ax-sort -- right-hand side

  record Theory ‚Ñìa : Set (lsuc (‚Ñìs ‚äî ‚Ñìo ‚äî ‚Ñìa)) where
    field
      ax : Set ‚Ñìa -- the axioms
      ax-eq : ax ‚Üí Axiom -- each axiom has a corresponding Axiom

    ax-mv-ctx : ax ‚Üí MetaContext -- the meta-context of each axiom
    ax-mv-ctx Œµ = Axiom.ax-mv-ctx (ax-eq Œµ)

    ax-sort : ax ‚Üí sort -- the sort of each axiom
    ax-sort Œµ = Axiom.ax-sort (ax-eq Œµ)

    -- the left- and right-hand side of each axiom s ‚âà t
    ax-lhs : ‚àÄ (Œµ : ax) ‚Üí Term (ax-mv-ctx Œµ) ctx-empty (ax-sort Œµ)
    ax-lhs Œµ = Axiom.ax-lhs (ax-eq Œµ)

    ax-rhs : ‚àÄ (Œµ : ax) ‚Üí Term (ax-mv-ctx Œµ) ctx-empty (ax-sort Œµ)
    ax-rhs Œµ = Axiom.ax-rhs (ax-eq Œµ)
